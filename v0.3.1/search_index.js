var documenterSearchIndex = {"docs":
[{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"ParsingHTML/#Parsing-HTML","page":"Parsing HTML","title":"Parsing HTML","text":"","category":"section"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"HTMLBuilder.jl also lets you parse HTML. After loading the package with","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"using HTMLBuilder","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"and loading the raw HTML code into a string,","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"raw_HTML = raw\"<div><h1>A title</h1><p>Some text.</p></div>\"","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"you can parse it by running","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"parsed = parse_HTML(raw_HTML)","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"The parsed HTML is fully compatible with the rest of the features HTMLBuilder.jl. For instance, you can run","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"dv(h1(\"A title\"), parse_HTML(raw\"<p>A paragraph to be parsed.</p>\"))","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"build_site/#Building-a-Site-with-Multiple-Pages","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"","category":"section"},{"location":"build_site/#The-@build_site-macro","page":"Building a Site with Multiple Pages","title":"The @build_site macro","text":"","category":"section"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"HTMLBuilder.jl offers a convenient interface to manage multiple HTML pages through the @build_site macro.","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"You will need a project directory project (though this can be named anything, see the example folder in the HTMLBuilder.jl repository). Inside this directory, create a site folder, which will contain the code to generate your site (see example/site).","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"Within the site directory, create folders and Julia files as you like. When you are ready, run","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"using HTMLBuilder\n@build_site \"/path/to/project\"","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"The macro will create the dist directory, and parse all the Julia files in site to create HTML files. The file and folder structure in site will be reproduced in dist. For example example/site/index.jl will become example/dist/index.html, and example/site/simple/fibonacci.jl will become example/dist/simple/fibonacci.html.","category":"page"},{"location":"build_site/#Julia-pages","page":"Building a Site with Multiple Pages","title":"Julia pages","text":"","category":"section"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"The main way to generate HTML pages is by writing a Julia file page.jl which returns an HTMLElement. The @build_site macro will automatically create a page.html page with the output of page.jl. For example, see example/site/simple/fibonacci.jl, which becomes example/dist/simple/fibonacci.html.","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"warning: Warning\nThere is no need to run using HTMLBuilder in page.jl. The @build_site macro loads the contents of page.jl into your active environment, so any packages and code you have already loaded can be used directly.","category":"page"},{"location":"build_site/#Julia-pages-with-custom-paths","page":"Building a Site with Multiple Pages","title":"Julia pages with custom paths","text":"","category":"section"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"The path of page.jl can be manually specified. Instead of returning an HTMLElement, page.jl should return a Tuple{String, HTMLElement}, where the first element of the tuple specifies the path. For example, see example/site/advanced/custom_path.jl, which becomes example/dist/advanced/another_folder/another_path.jl","category":"page"},{"location":"build_site/#Multiple-Julia-pages-created-by-one-file","page":"Building a Site with Multiple Pages","title":"Multiple Julia pages created by one file","text":"","category":"section"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"If you want to create several pages with a single file, you can return a vector of pages: Vector{Tuple{String, HTMLElement}}. Each element is a Tuple with two elements: a custom path, and a HTMLElement. For example, see example/site/advanced/many_pages.jl, which generates all the pages in the example/dist/advanced/tribonacci folder.","category":"page"},{"location":"build_site/#Redirection-pages","page":"Building a Site with Multiple Pages","title":"Redirection pages","text":"","category":"section"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"To create a redirection, simply place a page.txt file in site which contains the redirection url. For example, see example/site/simple/redirection.txt, which becomes example/dist/simple/redirection.txt.","category":"page"},{"location":"build_site/#Assets","page":"Building a Site with Multiple Pages","title":"Assets","text":"","category":"section"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"If you need certain assets to be copied into your site (for instance, images), you can create an assets folder inside of the project directory. The files and folder structure within will be copied into dist without further processing. For example, example/assets/logos/logo-large.svg is copied to example/dist/logos/logo-large.svg.","category":"page"},{"location":"build_site/#Advanced-configuration","page":"Building a Site with Multiple Pages","title":"Advanced configuration","text":"","category":"section"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"You can pass a config::NamedTuple object to the @build_site macro by running","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"using HTMLBuilder\nconfig = (;\n  # options...\n)\n@build_site \"/path/to/project\" config","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"The following options are available:","category":"page"},{"location":"build_site/","page":"Building a Site with Multiple Pages","title":"Building a Site with Multiple Pages","text":"assets_path::String: the path to the assets folder within the project's directory. Defaults to assets.\ndist_path::String: the path to the dist folder within the project's directory. Defaults to dist. \nsite_path::String: the path to the site folder within the project's directory. Defaults to site.\nverbose::Bool: controls whether verbose output should be printed as the site is built. Defaults to false. ","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"HTMLElements/#HTML-Elements","page":"HTML Elements","title":"HTML Elements","text":"","category":"section"},{"location":"HTMLElements/#Constructing-HTML-elements","page":"HTML Elements","title":"Constructing HTML elements","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"HTMLBuilder.jl lets you construct HTML elements in idiomatic Julia. For example, after loading the package with","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"using HTMLBuilder","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"you can create a p (paragraph) element by running","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"p(\"Some text.\")","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"You can also pass multiple arguments to an element:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"p(\"Some text. \", \"Some more text.\")","category":"page"},{"location":"HTMLElements/#Rendering-HTML","page":"HTML Elements","title":"Rendering HTML","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"HTML elements are handled as Julia structs. HTMLBuilder.jl only renders plain HTML by extending the Base.write method. Therefore, to get plain HTML, simply convert your element to a string:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"string(p(\"Some text.\"))","category":"page"},{"location":"HTMLElements/#Nesting-elements","page":"HTML Elements","title":"Nesting elements","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"HTML elements can be nested. For instance, you can format text using the b (bold) and i (italic) tags:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"p(\"Some text. \", b(\"Some bold text.\"))","category":"page"},{"location":"HTMLElements/#Automatic-indentation","page":"HTML Elements","title":"Automatic indentation","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"warning: Warning\nThe div tag is exported as dv to avoid conflicts with the Base.div method.","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Some tags include custom indentation formatting:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"body(dv(h1(\"A title\"), p(\"Some text.\")))","category":"page"},{"location":"HTMLElements/#HTML-attributes","page":"HTML Elements","title":"HTML attributes","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"To include the HTML attributes of an element, pass a NamedTuple as the first argument with the names and values of the attributes. We can first define paths urls to the HTMLBuilder.jl logo","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"src = \"https://raw.githubusercontent.com/rafaelbailo/HTMLBuilder.jl/refs/heads/main/docs/src/assets/logo.svg\";","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"and to this documentation","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"href = \"https://rafaelbailo.github.io/HTMLBuilder.jl/\";","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Then, an img element can be constructed as","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"img((; src, alt = \"The HTMLBuilder.jl logo\", width = 500))","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Any additional arguments passed to the element will be treated as content. An a (hyperlink) element with text can be constructed as","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"a((; href), \"The HTMLBuilder.jl documentation\")","category":"page"},{"location":"HTMLElements/#Registering-your-own-HTML-elements","page":"HTML Elements","title":"Registering your own HTML elements","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"If you need to use an HTML element not exported by HTMLBuilder.jl, you can simply add your own with the @register macro:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"@register customelement","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Now you can work with the new element as you would with any other:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"dv(customelement(\"Some content.\"), p(\"Some more content.\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: HTMLBuilder.jl)","category":"page"},{"location":"#HTMLBuilder.jl:-Building-HTML-the-Julia-way","page":"Home","title":"HTMLBuilder.jl: Building HTML the Julia way","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<iframe src=\"https://ghbtns.com/github-btn.html?user=rafaelbailo&repo=HTMLBuilder.jl&type=star&count=true&size=large\" frameborder=\"0\" scrolling=\"0\" width=\"170\" height=\"30\" title=\"GitHub\"></iframe>","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Static Badge) (Image: Build Status) (Image: Coverage) (Image: Aqua) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"HTMLBuilder.jl is a package for handling HTML in idiomatic Julia. Currently, it can:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generate HTML code.\nParse HTML code.\nBuild a site with multiple pages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All the HTML elements are treated as Julia structs, so you can easily generate HTML programmatically. For instance, we can list the first N Fibonacci numbers. First we import HTMLBuilder.jl and define the Fibonacci function, as well as N=5:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using HTMLBuilder\nFibonacci(n::Int) = (n <= 2) ? (1) : (Fibonacci(n - 1) + Fibonacci(n - 2));\nN = 5;","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, we can construct the list by nesting HTML elements and using a for loop:","category":"page"},{"location":"","page":"Home","title":"Home","text":"body(\n  h1(\"The Fibonacci numbers\"),\n  p(\"Here are the first $N Fibonacci numbers:\"),\n  ul([li(string(Fibonacci(n))) for n ∈ 1:N]),\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"HTMLBuilder.jl can be used to build and manage a complex site through the @build_site macro. The example directory contains a site directory populated with Julia code. The @build_site macro parses these files and generates dist, a complete HTML site. For more details, see the documentation.","category":"page"},{"location":"#Bug-reports,-feature-requests,-and-contributions","page":"Home","title":"Bug reports, feature requests, and contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please see the contribution guidelines.","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"HTMLElement_interface/#HTML-Elements","page":"The HTMLElement Interface","title":"HTML Elements","text":"","category":"section"},{"location":"HTMLElement_interface/#Element-class","page":"The HTMLElement Interface","title":"Element class","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"At the heart of the HTMLBuilder.jl functionality is the HTMLElement type. Each html element is an instance of this type; for instance, p is of type pType, and alias for HTMLElement{pVal}, where pVal is an alias for Val{:p}. After building the element","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"using HTMLBuilder\nelement = p(\"Some text\")","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"you can test its type:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"element isa pType\npType","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"This type is related to the element's class field:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"element.class isa pVal","category":"page"},{"location":"HTMLElement_interface/#Element-attributes","page":"The HTMLElement Interface","title":"Element attributes","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"The attributes field contains the information about the HTML attributes of an element's HTML tag. This is by default an empty NamedTuple:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"element = p(\"Some text\")\nelement.attributes","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"However, any attributes you pass during construction will be stored there:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"href = \"https://rafaelbailo.github.io/HTMLBuilder.jl/\";\nelement = a((; href), \"The HTMLBuilder.jl documentation\")\nelement.attributes","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"Any attributes with value \"\" or true will be treated as boolean HTML attributes. Attributes with value false will be ignored:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"button((; disabled=\"\"), \"Button text\")\nbutton((; disabled=true), \"Button text\")\nbutton((; disabled=false), \"Button text\")","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"You can customise the default attributes of a custom element by extending the HTMLBuilder.get_default_attributes method:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"@register withCustomAttributes\nHTMLBuilder.get_default_attributes(s::withCustomAttributesVal) = (; disabled = true)\nwithCustomAttributes()","category":"page"},{"location":"HTMLElement_interface/#Element-config","page":"The HTMLElement Interface","title":"Element config","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"The config field contains the configuration options of an HTML element. Two options are currently available.","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"The indent option controls whether the contents of an element are indented. Compare","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"p(\"Some text.\")","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"with ","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"p(\"Some text.\", (; indent = false))","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"The single_tag option is used to reduce an HTML element to a single tag. This is used by default for the br and img elements:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"br()\nimg()","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"You can customise the default configuration of a custom element by extending the HTMLBuilder.get_default_config method:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"@register withCustomConfig\nHTMLBuilder.get_default_config(s::withCustomConfigVal) = (; indent = true)\nwithCustomConfig(\"Some content.\")","category":"page"},{"location":"HTMLElement_interface/#Element-children","page":"The HTMLElement Interface","title":"Element children","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"The children field contains the content (\"children\") of an HTML element. If we define a complex HTML expression,","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"element = body(dv(h1(\"A title\"), p(\"Some text.\")))","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"we can then explore the content by recursively accesing the children field:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"element.children[1]\nelement.children[1].children[1]\nelement.children[1].children[2]","category":"page"},{"location":"HTMLElement_interface/#The-Content-type","page":"The HTMLElement Interface","title":"The Content type","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"The field children is always a Vector{Content}, where Content = Union{HTML, AbstractString}, and HTML is an abstract type. All HTMLElements inherit from HTML.","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"You can customise the default children of a custom element by extending the HTMLBuilder.get_default_children method, always returning a Vector{Content}:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"@register withCustomChildren\nfunction HTMLBuilder.get_default_children(s::withCustomChildrenVal, config)\n  return [h1(\"Children one\"), p(\"Children two\")]\nend\nwithCustomChildren()","category":"page"},{"location":"HTMLElement_interface/#Beyond-the-default-settings","page":"The HTMLElement Interface","title":"Beyond the default settings","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"While every element has default attributes, config, and children, they can be specifically set on each construction. Given an element (such as p), the following are valid calls:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"Only specifying the children:\nelement(child::Content)\nelement(children::Vector{Content})\nelement(children::Content...)\nSpecifying the attributes and the children:\nelement(attributes::NamedTuple, child::Content)\nelement(attributes::NamedTuple, children::Vector{Content})\nelement(attributes::NamedTuple, children::Content...)\nSpecifying the children and the configuration:\nelement(child::Content, config::NamedTuple)\nelement(children::Vector{Content}, config::NamedTuple)\nSpecifying the attributes, the children, and the configuration:\nelement(attributes::NamedTuple, child::Content, config::NamedTuple)\nelement(attributes::NamedTuple, children::Vector{Content}, config::NamedTuple)","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"Note that the order is always:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"attributes\nchild or children\nconfig","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"where attributes or config may be omitted. ","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement Interface","title":"The HTMLElement Interface","text":"Note further that, when specifying several children, we must usually pass children::Vector{Content}. However, when config is not speficied, children::Content... is also allowed.","category":"page"}]
}
