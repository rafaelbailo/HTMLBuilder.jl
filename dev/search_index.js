var documenterSearchIndex = {"docs":
[{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"ParsingHTML/#Parsing-HTML","page":"Parsing HTML","title":"Parsing HTML","text":"","category":"section"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"HTMLBuilder.jl also lets you parse HTML. After loading the package with","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"using HTMLBuilder","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"and loading the raw HTML code into a string,","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"raw_HTML = raw\"<div><h1>A title</h1><p>Some text.</p></div>\"","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"you can parse it by running","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"parsed = parse_HTML(raw_HTML)","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"The parsed HTML is fully compatible with the rest of the features HTMLBuilder.jl. For instance, you can run","category":"page"},{"location":"ParsingHTML/","page":"Parsing HTML","title":"Parsing HTML","text":"dv(h1(\"A title\"), parse_HTML(raw\"<p>A paragraph to be parsed.</p>\"))","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"HTMLElements/#HTML-Elements","page":"HTML Elements","title":"HTML Elements","text":"","category":"section"},{"location":"HTMLElements/#Constructing-HTML-elements","page":"HTML Elements","title":"Constructing HTML elements","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"HTMLBuilder.jl lets you construct HTML elements in idiomatic Julia. For example, after loading the package with","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"using HTMLBuilder","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"you can create a p (paragraph) element by running","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"p(\"Some text.\")","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"You can also pass multiple arguments to an element:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"p(\"Some text. \", \"Some more text.\")","category":"page"},{"location":"HTMLElements/#Rendering-HTML","page":"HTML Elements","title":"Rendering HTML","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"HTML elements are handled as Julia structs. HTMLBuilder.jl only renders plain HTML by extending the Base.write method. Therefore, to get plain HTML, simply convert your element to a string:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"string(p(\"Some text.\"))","category":"page"},{"location":"HTMLElements/#Nesting-elements","page":"HTML Elements","title":"Nesting elements","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"HTML elements can be nested. For instance, you can format text using the b (bold) and i (italic) tags:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"p(\"Some text. \", b(\"Some bold text.\"))","category":"page"},{"location":"HTMLElements/#Automatic-indentation","page":"HTML Elements","title":"Automatic indentation","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"warning: Warning\nThe div tag is exported as dv to avoid conflicts with the Base.div method.","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Some tags include custom indentation formatting:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"body(dv(h1(\"A title\"), p(\"Some text.\")))","category":"page"},{"location":"HTMLElements/#HTML-attributes","page":"HTML Elements","title":"HTML attributes","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"To include the HTML attributes of an element, pass a NamedTuple as the first argument with the names and values of the attributes. We can first define paths urls to the HTMLBuilder.jl logo","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"src = \"https://raw.githubusercontent.com/rafaelbailo/HTMLBuilder.jl/refs/heads/main/docs/src/assets/logo.svg\";","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"and to this documentation","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"href = \"https://rafaelbailo.github.io/HTMLBuilder.jl/\";","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Then, an img element can be constructed as","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"img((; src, alt = \"The HTMLBuilder.jl logo\", width = 500))","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Any additional arguments passed to the element will be treated as content. An a (hyperlink) element with text can be constructed as","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"a((; href), \"The HTMLBuilder.jl documentation\")","category":"page"},{"location":"HTMLElements/#Register-your-own-HTML-elements","page":"HTML Elements","title":"Register your own HTML elements","text":"","category":"section"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"If you need to use an HTML element not exported by HTMLBuilder.jl, you can simply add your own with the @register macro:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"@register customelement","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"Now you can work with the new element as you would with any other:","category":"page"},{"location":"HTMLElements/","page":"HTML Elements","title":"HTML Elements","text":"dv(customelement(\"Some content.\"), p(\"Some more content.\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: HTMLBuilder.jl)","category":"page"},{"location":"#HTMLBuilder.jl:-Building-HTML-the-Julia-way","page":"Home","title":"HTMLBuilder.jl: Building HTML the Julia way","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<iframe src=\"https://ghbtns.com/github-btn.html?user=rafaelbailo&repo=HTMLBuilder.jl&type=star&count=true&size=large\" frameborder=\"0\" scrolling=\"0\" width=\"170\" height=\"30\" title=\"GitHub\"></iframe>","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Static Badge) (Image: Build Status) (Image: Coverage) (Image: Aqua) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"HTMLBuilder.jl is a package for handling HTML in idiomatic Julia. Currently, it can construct and parse HTML code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All the HTML elements are treated as Julia structs, so you can easily generate HTML programmatically. For instance, we can list the first N Fibonacci numbers. First we import HTMLBuilder.jl and define the Fibonacci function, as well as N=5:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using HTMLBuilder\njulia> Fibonacci(n::Int) = (n <= 2) ? (1) : (Fibonacci(n - 1) + Fibonacci(n - 2));\njulia> N = 5;","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, we can construct the list by nesting HTML elements and using a for loop:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> body(\n         h1(\"The Fibonacci numbers\"),\n         p(\"Here are the first $N Fibonacci numbers:\"),\n         ul([li(string(Fibonacci(n))) for n âˆˆ 1:N]),\n       )","category":"page"},{"location":"","page":"Home","title":"Home","text":"which returns","category":"page"},{"location":"","page":"Home","title":"Home","text":"<body>\n  <h1>The Fibonacci numbers</h1>\n  <p>Here are the first 5 Fibonacci numbers:</p>\n  <ul>\n    <li>\n      1\n    </li>\n    <li>\n      1\n    </li>\n    <li>\n      2\n    </li>\n    <li>\n      3\n    </li>\n    <li>\n      5\n    </li>\n  </ul>\n</body>","category":"page"},{"location":"#Bug-reports,-feature-requests,-and-contributions","page":"Home","title":"Bug reports, feature requests, and contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please see the contribution guidelines.","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"CurrentModule = HTMLBuilder","category":"page"},{"location":"HTMLElement_interface/#HTML-Elements","page":"The HTMLElement interface","title":"HTML Elements","text":"","category":"section"},{"location":"HTMLElement_interface/#Element-class","page":"The HTMLElement interface","title":"Element class","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"At the heart of the HTMLBuilder.jl functionality is the HTMLElement type. Each html element is an instance of this type; for instance, p is of type pType, and alias for HTMLElement{pVal}, where pVal is an alias for Val{:p}. After building the element","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"using HTMLBuilder\nelement = p(\"Some text\")","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"you can test its type:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"element isa pType\npType","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"This type is related to the element's class field:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"element.class isa pVal","category":"page"},{"location":"HTMLElement_interface/#Element-attributes","page":"The HTMLElement interface","title":"Element attributes","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"The attributes field contains the information about the HTML attributes of an element's HTML tag. This is by default an empty NamedTuple:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"element = p(\"Some text\")\nelement.attributes","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"However, any attributes you pass during construction will be stored there:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"href = \"https://rafaelbailo.github.io/HTMLBuilder.jl/\";\nelement = a((; href), \"The HTMLBuilder.jl documentation\")\nelement.attributes","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"Any attributes with value \"\" or true will be treated as boolean HTML attributes. Attributes with value false will be ignored:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"button((; disabled=\"\"), \"Button text\")\nbutton((; disabled=true), \"Button text\")\nbutton((; disabled=false), \"Button text\")","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"You can customise the default attributes of a custom element by extending the HTMLBuilder.get_default_attributes method:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"@register withCustomAttributes\nHTMLBuilder.get_default_attributes(s::withCustomAttributesVal) = (; disabled = true)\nwithCustomAttributes()","category":"page"},{"location":"HTMLElement_interface/#Element-config","page":"The HTMLElement interface","title":"Element config","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"The config field contains the configuration options of an HTML element. Two options are currently available.","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"The indent option controls whether the contents of an element are indented. Compare","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"p(\"Some text.\")","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"with ","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"p(\"Some text.\", (; indent = false))","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"The single_tag option is used to reduce an HTML element to a single tag. This is used by default for the br and img elements:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"br()\nimg()","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"You can customise the default configuration of a custom element by extending the HTMLBuilder.get_default_config method:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"@register withCustomConfig\nHTMLBuilder.get_default_config(s::withCustomConfigVal) = (; indent = true)\nwithCustomConfig(\"Some content.\")","category":"page"},{"location":"HTMLElement_interface/#Element-children","page":"The HTMLElement interface","title":"Element children","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"The children field contains the content (\"children\") of an HTML element. If we define a complex HTML expression,","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"element = body(dv(h1(\"A title\"), p(\"Some text.\")))","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"we can then explore the content by recursively accesing the children field:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"element.children[1]\nelement.children[1].children[1]\nelement.children[1].children[2]","category":"page"},{"location":"HTMLElement_interface/#The-Content-type","page":"The HTMLElement interface","title":"The Content type","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"The field children is always a Vector{Content}, where Content = Union{HTML, AbstractString}, and HTML is an abstract type. All HTMLElements inherit from HTML.","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"You can customise the default children of a custom element by extending the HTMLBuilder.get_default_children method, always returning a Vector{Content}:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"@register withCustomChildren\nfunction HTMLBuilder.get_default_children(s::withCustomChildrenVal, config)\n  return [h1(\"Children one\"), p(\"Children two\")]\nend\nwithCustomChildren()","category":"page"},{"location":"HTMLElement_interface/#Beyond-the-default-settings","page":"The HTMLElement interface","title":"Beyond the default settings","text":"","category":"section"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"While every element has default attributes, config, and children, they can be specifically set on each construction. Given an element (such as p), the following are valid calls:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"Only specifying the children:\nelement(child::Content)\nelement(children::Vector{Content})\nelement(children::Content...)\nSpecifying the attributes and the children:\nelement(attributes::NamedTuple, child::Content)\nelement(attributes::NamedTuple, children::Vector{Content})\nelement(attributes::NamedTuple, children::Content...)\nSpecifying the children and the configuration:\nelement(child::Content, config::NamedTuple)\nelement(children::Vector{Content}, config::NamedTuple)\nSpecifying the attributes, the children, and the configuration:\nelement(attributes::NamedTuple, child::Content, config::NamedTuple)\nelement(attributes::NamedTuple, children::Vector{Content}, config::NamedTuple)","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"Note that the order is always:","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"attributes\nchild or children\nconfig","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"where attributes or config may be omitted. ","category":"page"},{"location":"HTMLElement_interface/","page":"The HTMLElement interface","title":"The HTMLElement interface","text":"Note further that, when specifying several children, we must usually pass children::Vector{Content}. However, when config is not speficied, children::Content... is also allowed.","category":"page"}]
}
